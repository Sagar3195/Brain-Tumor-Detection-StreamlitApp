# -*- coding: utf-8 -*-
"""Brain_Tumor_Detection Using CNN 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FrlsGPWgIU7MCEsgH503wdgj6Z9TKWM-
"""



from tensorflow.keras.layers import Flatten, Dense, Dropout, MaxPooling2D, Conv2D
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.applications.vgg19 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import BatchNormalization
from glob import glob
import numpy as np

yes = "/content/drive/My Drive/Brain_Tumor_Detection/brain_tumor_dataset/yes"
no = "/content/drive/My Drive/Brain_Tumor_Detection/brain_tumor_dataset/no"

### now we create CNN from scratch
model = Sequential()
model.add(Conv2D(64, (3,3), input_shape = (64, 64, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size= (2,2)))
model.add(Conv2D(32, (3,3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Conv2D(32, (3,3), activation = 'relu'))
model.add(Flatten())
model.add(Dense(64, activation = 'relu'))
model.add(Dense(2, activation = 'softmax'))
model.summary()

## now we do data augmentation
train_datagen = ImageDataGenerator(rescale= 1./255, 
                                   shear_range = 0.2, 
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

train_set = train_datagen.flow_from_directory("/content/drive/My Drive/Brain_Tumor_Detection/brain_tumor_dataset/", target_size= (64, 64),
                                              batch_size = 32,
                                              class_mode = 'categorical')

test_set = test_datagen.flow_from_directory("/content/drive/My Drive/Brain_Tumor_Detection/brain_tumor_dataset/", 
                                            target_size = (64, 64),
                                            batch_size = 32, class_mode = "categorical")

#now we compile the model
model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])



### Now we fitt the model for training 
result = model.fit_generator(train_set, steps_per_epoch= len(train_set), epochs = 50, validation_data= test_set, validation_steps= len(test_set))

import matplotlib.pyplot as plt
plt.plot(result.history['loss'], label = 'Train Loss')
plt.plot(result.history['val_loss'], label = 'Val Loss')
plt.legend()
plt.show()

plt.plot(result.history['accuracy'], label = 'Train Acc')
plt.plot(result.history['val_accuracy'], label = 'Val Acc')
plt.legend()
plt.show()



from tensorflow.keras.models import load_model
model.save("brain_tumor_model_CNN.h5")

##Now we load the model for prediction of new dataset
model_img = load_model("brain_tumor_model_CNN.h5")

img = image.load_img("/content/drive/MyDrive/Brain_Tumor_Detection/brain_tumor_dataset/yes/Y10.jpg",target_size = (64, 64))

test_img = image.img_to_array(img)

test_img.shape

test_img = np.expand_dims(test_img, axis = 0)

test_img

test_img = preprocess_input(test_img)

test_img

predict_test = model_img.predict(test_img)
predict_test

if np.argmax(predict_test) == 0:
  print("No Tumor")
else:
  print("Have Tumor")

